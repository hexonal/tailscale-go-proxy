---
description: 
globs: 
alwaysApply: true
---
# Go 配置管理与日志规范 (v1.0)

本规则涵盖了 Go 应用中配置管理和日志记录的最佳实践。

## 配置管理

*   **外部化**: **禁止**将配置（数据库密码、API 密钥、端口等）硬编码在代码中。应通过外部源加载，以提高灵活性和安全性。
*   **来源优先级 (常见)**: 推荐使用分层配置加载，常见优先级顺序（由低到高）：
    1.  默认值 (在代码中定义)
    2.  配置文件 (如 `config.yaml`)
    3.  环境变量
    4.  命令行参数
*   **库推荐**: 使用成熟的库来处理配置加载、解析和合并，如:
    *   `viper`: 功能强大，支持多种格式和来源。
    *   `koanf`: 另一个灵活的配置库。
    *   标准库 `flag`, `os` (适用于简单场景)。
*   **结构化**: 定义 `struct` 来映射配置项，利用类型安全和代码补全。在应用启动时将配置加载到结构体实例中，并通过依赖注入传递给需要的模块。
    *   '''go
        type ServerConfig struct {
            Port int `mapstructure:"port" default:"8080"`
            Mode string `mapstructure:"mode" default:"development"`
        }

        type DBConfig struct {
            Host     string `mapstructure:"host"`
            Port     int    `mapstructure:"port"`
            Username string `mapstructure:"username"` // Consider using env var for password
            // Password string - Load from env var or secret manager
        }

        type Config struct {
            Server ServerConfig `mapstructure:"server"`
            DB     DBConfig     `mapstructure:"database"`
        }
        '''
*   **[敏感信息](mdc:go-security.mdc#8-敏感信息处理)**: 密码、API 密钥等敏感信息**绝不**应出现在配置文件或代码仓库中。应通过环境变量、Secrets Management 系统（如 HashiCorp Vault, AWS Secrets Manager）或加密文件加载。
*   **AI 指导**: 检查代码中是否存在硬编码的配置项（特别是敏感信息）。建议使用推荐的配置库和结构体来管理配置。检查敏感信息是否从安全来源加载。

## 日志 (Logging)

*   **结构化日志**: **强烈推荐**使用结构化日志库，将日志输出为 JSON 或其他机器可读格式，便于后续的收集、解析和分析。
    *   **库推荐**: 
        *   `slog` (Go 1.21+ 标准库): 官方推荐，性能良好，API 稳定。
        *   `zap`: 高性能。
        *   `zerolog`: 另一个高性能、低分配的选择。
*   **日志级别**: 合理使用日志级别 (DEBUG, INFO, WARN, ERROR, FATAL/PANIC) 来控制日志输出量和区分事件重要性。
    *   **DEBUG**: 用于开发调试，生产环境通常关闭。
    *   **INFO**: 应用正常运行的关键事件和状态。
    *   **WARN**: 潜在问题，但不影响当前操作。
    *   **ERROR**: 发生了错误，需要关注，但应用可能还能继续服务其他请求。
    *   **FATAL/PANIC**: 严重错误，导致应用进程退出。
*   **包含有用上下文**: 日志条目应包含足够的信息来理解事件背景和进行问题排查。
    *   **必备**: 时间戳, 日志级别, 消息文本。
    *   **推荐**: 服务名/模块名, 函数名, 文件行号 (可选), [Trace ID / Request ID](mdc:go-context.mdc) (在请求处理链中传递), 关键业务标识符 (UserID, OrderID 等，脱敏处理)。
    *   **ERROR 日志**: 必须包含详细的错误信息，包括错误堆栈 (如果适用)。
*   **避免敏感信息**: **严格禁止**在日志中记录任何[敏感信息](mdc:go-security.mdc#8-敏感信息处理)（密码、令牌、个人身份信息 PII 等）。对可能包含敏感信息的用户输入或数据进行脱敏处理。
*   **日志输出**: 配置日志输出到标准输出 (`stdout`) 或标准错误 (`stderr`)。这与容器化和云原生环境的日志收集机制（如 Fluentd, Logstash）兼容性最好。避免直接写入日志文件，除非是特定场景的要求，并将文件轮转(rotation)和清理交给专门的工具。
*   **[性能考虑](mdc:go-performance.mdc)**: 虽然结构化日志库性能很高，但在极高性能要求的代码路径中，仍需注意[日志记录带来的开销](mdc:go-performance.mdc#5-其他常见优化点)。避免在热点循环中过度记录日志。
*   **请求日志**: **推荐**使用 [HTTP 中间件](mdc:go-idioms.mdc)来实现统一的请求日志记录，包括请求方法、路径、状态码、处理时长、User-Agent、来源 IP 等。
*   **AI 指导**: 检查是否使用了推荐的结构化日志库。检查日志输出是否包含必要的上下文信息。提醒检查日志中是否可能包含敏感信息。检查日志级别的使用是否恰当。建议使用中间件实现请求日志。
