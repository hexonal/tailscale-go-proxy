---
description: 
globs: 
alwaysApply: true
---
# Go 性能优化指南 (v1.0)
(代码中的性能考量亦可在[文档注释](mdc:go-comments.mdc#22-公共-api-注释-exported-identifiers)中说明)

本规则提供了一系列 Go 应用性能优化的建议和最佳实践，帮助开发者识别和解决常见的性能瓶颈。

## 1. 性能分析 (Profiling)

*   **首要步骤**: 在进行任何性能优化之前，**必须**使用分析工具 (profiling tools) 来识别真正的性能瓶颈。不要凭猜测进行优化。
*   **`pprof`**: Go 标准库的 `pprof` 是首选的性能分析工具。
    *   **CPU Profiling**: 识别 CPU 密集型函数。
        *   通过 `net/http/pprof` 在 HTTP 服务中集成。
        *   使用 `runtime/pprof` 进行代码级 profile。
        *   `go test -cpuprofile cpu.prof`
    *   **Memory Profiling (Heap Profiling)**: 分析内存分配情况，识别内存泄漏或过多分配。
        *   `go test -memprofile mem.prof` (与 [Benchmark 测试](mdc:go-testing.mdc#benchmark-测试) 结合使用效果更佳)
    *   **Block Profiling**: 识别导致 Goroutine 阻塞的操作 (如 channel 发送/接收，等待锁)。
    *   **Mutex Profiling**: 识别锁竞争激烈的地方。
*   **可视化**: 使用 `go tool pprof` 命令分析生成的 profile 文件，可以生成火焰图 (flame graphs)、调用图等。
*   **AI 指导**: 当用户提及性能问题时，首先建议使用 `pprof` 进行分析，并指导如何集成和使用 `pprof`。

## 2. 减少内存分配 (Reducing Allocations)

过多的内存分配会增加 GC (垃圾回收) 的压力，导致应用暂停 (STW, Stop-The-World) 和性能下降。

*   **预分配 Slice 和 Map**:
    *   如果预先知道 slice 或 map 的大概大小，使用 `make` 创建时指定容量，以避免多次重新分配和复制。
        *   `mySlice := make([]int, 0, expectedSize)`
        *   `myMap := make(map[string]int, expectedSize)`
*   **使用 `sync.Pool`**:
    *   对于生命周期短、频繁创建和销毁的对象，使用 `sync.Pool` 来复用对象，减少分配和 GC 压力。
    *   常见场景: 临时缓冲区 (`bytes.Buffer`)、临时结构体。
    *   **注意**: `sync.Pool` 中的对象可能在任何时候被 GC 回收，不能用于存储需要持久化的状态。
*   **避免不必要的字符串转换与拼接**:
    *   字符串在 Go 中是不可变的。频繁的字符串拼接会产生大量临时字符串对象。
    *   使用 `strings.Builder` 或 `bytes.Buffer` 进行高效的字符串构建。
    *   谨慎使用 `[]byte(string)` 和 `string([]byte)` 转换，它们都会发生内存拷贝。
*   **指针 vs 值**:
    *   传递大型结构体时，使用指针可以避免复制开销。
    *   但过多的指针可能导致对象逃逸到堆上，增加 GC 压力。需要权衡。
*   **API 设计**: 考虑 API 是否导致不必要的内存分配。例如，返回 slice 的函数是否可以接受一个已分配的 slice 作为参数来填充数据。

## 3. 并发性能 (Concurrency Performance)
(本节内容与 [Go 并发编程指南](mdc:go-concurrency.mdc) 紧密相关)

*   **避免锁竞争 (Lock Contention)**:
    *   尽量缩小临界区 (锁保护的代码范围)。
    *   使用更细粒度的锁。
    *   考虑使用 `sync.RWMutex` (读写锁) 允许多个读操作并行执行。
    *   对于某些场景，可以考虑无锁数据结构或原子操作 (`sync/atomic` 包)。
*   **Channel 性能**:
    *   无缓冲 Channel 的发送和接收是同步的，可能成为瓶颈。
    *   带缓冲 Channel 可以解耦发送方和接收方，提高吞吐量，但要注意缓冲区大小的选择，避免死锁或过度消耗内存。
*   **合理设置 `GOMAXPROCS`**:
    *   通常情况下，默认值 (CPU核心数) 是合适的。但在某些特定场景（如 I/O 密集型应用且 Goroutine 数量巨大），调整此参数可能带来性能变化，需通过测试验证。

## 4. I/O 优化

*   **带缓冲的 I/O**: 对文件或网络 I/O 使用带缓冲的读写 (`bufio` 包)，可以显著减少系统调用次数，提高效率。
*   **`io.Copy` 和 `io.CopyBuffer`**: 在流式数据复制时，优先使用这些函数，它们经过优化，效率较高。`io.CopyBuffer` 允许指定缓冲区。
*   **减少小块读写**: 尽量一次性读写较大块的数据，而不是多次读写小块数据。

## 5. 其他常见优化点

*   **`defer` 的开销**: [`defer`](mdc:go-idioms.mdc#defer) 会带来微小的性能开销。在对性能要求极高的热点路径 (如循环内部)，如果 `defer` 的使用非常频繁，可能需要考虑手动管理资源释放。但在绝大多数情况下，`defer` 的可读性和安全性更重要。
*   **接口调用的开销**: [接口](mdc:go-idioms.mdc#接口满足)方法调用比直接方法调用有轻微的开销，因为需要动态派发。在性能敏感路径，如果发现接口调用是瓶颈，可以考虑具体类型调用，但这通常是微优化，需 `pprof` 数据支持。
*   **正则表达式编译**: 如果正则表达式在循环中使用，预先编译它 (`regexp.MustCompile`) 并复用编译后的对象，避免重复编译。
*   **JSON 处理**:
    *   标准库 `encoding/json` 使用反射，性能可能不是最优 (结构化日志库如 [slog, zap, zerolog](mdc:go-config-logging.mdc#日志-logging) 可能提供更优性能的 JSON 处理)。
    *   对于高性能场景，可以考虑使用第三方库如 `json-iterator/go` 或代码生成工具。

## 6. 避免过早优化和微优化

*   **清晰性优先**: 代码首先要清晰、正确、可维护。
*   **数据驱动**: 只有当 `pprof` 等工具明确指出性能瓶颈时，才进行针对性的优化。
*   **衡量效果**: 优化后，再次使用分析工具衡量效果，确保优化是有效的并且没有引入新的问题。

---
**AI 指导**:
*   当讨论代码性能时，引导用户使用 `pprof` 进行分析。
*   针对 `pprof` 的结果，结合本规则提供具体的优化建议。
*   提醒用户注意优化带来的复杂性和可维护性成本。
