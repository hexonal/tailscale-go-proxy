---
description: 
globs: 
alwaysApply: true
---
# Go 安全编程指南 (v1.0)

本规则旨在提高 Go 应用的安全性，涵盖常见的安全漏洞预防和最佳实践。安全是一个持续的过程，开发者应保持警惕并不断学习。

## 1. 输入验证与处理 (Input Validation)

*   **信任边界**: 明确定义系统的信任边界。**绝不**信任来自边界之外的任何输入（用户请求、外部 API 响应、文件内容等）。
*   **严格验证**: 对所有外部输入进行严格的验证和净化 (sanitization)。
    *   **类型检查**: 确保输入符合预期的数据类型。
    *   **长度限制**: 限制输入的长度，防止缓冲区溢出或资源耗尽。
    *   **格式检查**: 使用正则表达式或特定格式校验器验证输入格式（如邮箱、URL、UUID）。
    *   **白名单验证**: 优先使用白名单方法（只允许已知的安全字符或模式），而不是黑名单（尝试阻止已知的危险字符）。
    *   **库推荐**: 使用成熟的验证库（如 `go-playground/validator`）。
*   **输出编码**: 在将数据输出到不同上下文（HTML, SQL, JavaScript, Shell）时，**必须**进行适当的上下文编码，以防止注入攻击（如 XSS, SQL注入）。
    *   **HTML**: 使用 `html/template` 包，它默认提供上下文感知的自动编码。避免手动拼接 HTML。
    *   **SQL**: 使用参数化查询（见下文）。
    *   **JSON**: 标准库 `encoding/json` 通常是安全的，但要注意不要将用户提供的、未经验证的数据直接嵌入到动态生成的 JSON 结构中。

## 2. SQL 注入防护

*   **参数化查询 (Parameterized Queries)**: 与数据库交互时，**必须**使用参数化查询（也称为预编译语句 Prepared Statements）。**严禁**手动拼接 SQL 语句将用户输入嵌入其中。
    *   使用 `database/sql` 标准库: `db.QueryContext(ctx, "SELECT name FROM users WHERE id = ?", userID)`
    *   使用 ORM (如 GORM): 确保使用 ORM 提供的安全方式来处理用户输入，例如 `db.Where("name = ?", userName).First(&user)`。避免使用 `Raw` SQL 或不安全的拼接方法。
*   **最小权限原则**: 数据库连接使用的用户应具有完成其任务所需的最小权限。

## 3. 并发安全 (Concurrency Safety)

*   **数据竞争 (Data Races)**: 严格避免并发访问共享数据时的数据竞争 (详情参见 [Go 并发编程指南](mdc:go-concurrency.mdc))。
    *   使用 `sync` 包提供的互斥锁 (`Mutex`, `RWMutex`) 或 Channel 来同步访问。
    *   运行测试时加上 [`-race` 标志](mdc:go-testing.mdc#单元测试) (`go test -race ./...`) 来检测潜在的数据竞争。
*   **死锁 (Deadlocks)**: 设计并发逻辑时注意避免死锁。
*   **资源耗尽**: 限制并发操作的数量（如 Goroutine 数量、打开的文件描述符、数据库连接池大小），防止恶意或意外的并发请求耗尽系统资源 (DoS)。使用 [`context`](mdc:go-context.mdc#用途) 控制超时 (也与 [Goroutine 生命周期管理](mdc:go-concurrency.mdc#管理-goroutine-生命周期) 相关)。

## 4. 错误处理与信息泄露 (参见 [Go 错误处理规范](mdc:go-errors.mdc) 及 [日志规范](mdc:go-config-logging.mdc#日志-logging)中关于错误日志和敏感信息的部分)

*   **避免暴露敏感信息**: 不要在错误消息中向最终用户泄露敏感的内部信息（如文件路径、数据库结构、堆栈跟踪）。对用户展示通用的错误提示，并将详细错误记录在安全的日志系统中。
*   **检查错误**: 始终检查函数（尤其是 I/O 操作、类型转换）返回的错误，防止程序在非预期状态下继续运行。

## 5. 依赖安全 (Dependency Security)

*   **漏洞扫描**: 定期使用工具扫描项目依赖的第三方库是否存在已知的安全漏洞 (CVEs)。
    *   **工具**: `govulncheck` (官方工具), `snyk`, `trivy` 等。
*   **及时更新**: 保持依赖库更新到最新的安全版本。
*   **最小依赖**: 仅引入项目确实需要的依赖库，减少潜在的攻击面。检查 [`go.mod` 文件](mdc:go-packages.mdc#包设计与依赖管理) (涉及依赖定义)。

## 6. 资源管理与 DoS 防护

*   **超时设置**: 为所有外部调用（网络请求、数据库查询）和内部处理设置合理的超时 ([`context.WithTimeout`](mdc:go-context.mdc#context-的创建与派生))，防止单个请求长时间占用资源。
*   **速率限制 (Rate Limiting)**: 对来自客户端或特定 IP 的请求频率进行限制，防止暴力破解和 DoS 攻击。 (**(常通过 [Middleware](mdc:go-idioms.mdc#http-中间件模式-middleware-pattern) 实现)**)
*   **请求大小限制**: 限制接受的 HTTP 请求体大小，防止恶意的大请求耗尽内存。 (**(常通过 [Middleware](mdc:go-idioms.mdc#http-中间件模式-middleware-pattern) 实现)**)
*   **连接池**: 合理配置数据库连接池、HTTP 客户端连接池等资源池的大小。
*   **文件上传**: 限制上传文件的大小和类型。对上传的文件进行安全扫描。不要将用户上传的文件存储在Web服务器的可执行目录下。

## 7. Web 应用安全

*   **HTTPS**: **必须**使用 HTTPS (TLS) 加密所有 Web 流量。
*   **安全头 (Security Headers)**: 设置推荐的安全 HTTP 头。 (**(常通过 [Middleware](mdc:go-idioms.mdc#http-中间件模式-middleware-pattern) 实现)**)
    *   `Strict-Transport-Security` (HSTS): 强制浏览器使用 HTTPS。
    *   `Content-Security-Policy` (CSP): 限制浏览器加载资源的来源，防御 XSS。
    *   `X-Content-Type-Options: nosniff`: 防止浏览器 MIME 类型嗅探。
    *   `X-Frame-Options: DENY` 或 `SAMEORIGIN`: 防止点击劫持 (Clickjacking)。
    *   `Referrer-Policy`: 控制 Referer 头信息的发送。
*   **跨站请求伪造 (CSRF) 防护**: 使用 Anti-CSRF Token 或 SameSite Cookie 策略来防御 CSRF 攻击。 (**(常通过 [Middleware](mdc:go-idioms.mdc#http-中间件模式-middleware-pattern) 实现)**)
*   **认证与授权**: (**(常通过 [Middleware](mdc:go-idioms.mdc#http-中间件模式-middleware-pattern) 实现)**)
    *   使用强密码策略和安全的密码存储（哈希加盐）。
    *   实现安全的会话管理 (Session Management)。
    *   仔细实现授权逻辑，确保用户只能访问其被授权的资源。
*   **Cookie 安全**: 设置 Cookie 的 `Secure`, `HttpOnly`, `SameSite` 属性。

## 8. 敏感信息处理

*   **存储**: **严禁**明文存储密码、API 密钥等敏感信息 (配置文件中的敏感信息处理参见 [配置管理](mdc:go-config-logging.mdc#敏感信息))。使用强哈希算法（如 bcrypt, scrypt, Argon2）加盐存储密码。其他敏感信息考虑加密存储或使用 Secrets Management 系统。
*   **传输**: 敏感信息在网络传输时**必须**加密 (TLS/HTTPS)。
*   **日志**: **严禁**在[日志](mdc:go-config-logging.mdc#避免敏感信息)中记录敏感信息（见日志规范）。
*   **内存**: 减少敏感信息在内存中的停留时间。使用后及时清理包含敏感信息的变量（虽然 Go GC 使这变得困难，但尽量减少其作用域）。

---
**AI 指导**:
*   在处理用户输入、数据库交互、文件操作等场景时，提示进行输入验证和输出编码。
*   建议使用参数化查询处理 SQL。
*   提醒检查并发代码是否存在竞态条件风险 ([`-race` 标志](mdc:go-testing.mdc#单元测试))。
*   建议使用 `govulncheck` 等工具扫描依赖漏洞。
*   在 Web 开发场景下，提醒检查 HTTPS 配置和安全头的设置。
*   强调敏感信息的安全处理和存储。
