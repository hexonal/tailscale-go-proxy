---
description: 
globs: 
alwaysApply: true
---
# Go 并发编程指南 (v1.0)

本规则提供了 Go 语言并发编程的最佳实践，包括 Goroutine 管理、Channel 使用和同步原语的应用。

## 并发

*   **优先 Channel**: "Share memory by communicating; don't communicate by sharing memory." 优先使用 Channel 在 Goroutine 之间传递数据和同步状态，这更符合 Go 的设计哲学，并能减少数据竞争的风险。
*   **谨慎共享内存**: 如果必须使用共享内存，务必使用 `sync` 包提供的同步原语（如 `sync.Mutex`, `sync.RWMutex`, `sync.WaitGroup`, `sync.Once`, `sync.Cond`）来保护并发访问，防止数据竞争。
*   **管理 Goroutine 生命周期**: 启动 Goroutine 后，要有明确的机制来管理其生命周期，确保它们在不再需要时能够正确退出。
    *   使用 [context.Context](mdc:go-context.mdc) 进行取消信号的传播。
    *   使用 `sync.WaitGroup` 等待一组 Goroutine 完成。
    *   避免 Goroutine 泄漏（即 Goroutine 在无法退出的情况下持续运行）。
    *   **AI 指导**: 分析 Goroutine 的创建，检查是否有相应的 `Context` 传递或 `WaitGroup` 使用，以及是否有明确的退出机制。
*   **控制并发度**: 对于需要限制并发数量的场景（如 worker pool 或外部资源访问限制），考虑使用以下方式：
    *   带缓冲的 Channel (作为信号量使用)。
    *   `golang.org/x/sync/semaphore` 包。
    *   **建议**: 参考 `go-patterns` 中的 `Bounded Parallelism` 或 `Semaphore` 模式。
*   **避免死锁**: 仔细设计锁的获取顺序，避免循环等待。使用 `go vet` 等工具检查潜在的死锁。
*   **Context 与并发**: 将 [context.Context](mdc:go-context.mdc) 传递给可能阻塞或长时间运行的 Goroutine，以便能够优雅地取消操作。
