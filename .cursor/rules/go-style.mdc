---
description: 
globs: 
alwaysApply: true
---
# Go 代码风格与格式化 (v1.0)

本规则定义了 Go 代码的风格、格式化、命名和注释规范，旨在提高代码的可读性和一致性。

## 代码风格与格式化

*   **强制格式化**: 所有 Go 代码提交前**必须**使用 `gofmt` 或 `goimports` 进行格式化。
    *   **AI 操作**: 在进行任何代码修改或添加后，提醒或自动执行 `goimports -w <modified_file.go>`。
*   **命名规范**:
    *   **包名**: 使用简短、小写、有意义的名称，不含下划线或混合大小写。避免使用 `util`, `common`, `base` 等模糊名称 (详细的包命名原则参见 [Go 包设计与项目结构](mdc:go-packages.mdc#3-包命名-package-naming))。
        *   **示例**: `net/http`, `encoding/json`
        *   **AI 指导**: 创建新包时，询问用户合适的包名，并检查是否符合规范。
    *   **变量/函数/类型**: 使用 `MixedCaps` 风格。
    *   **接口**: 单方法接口通常以 "-er" 结尾 (如 `Reader`, `Writer`) 或描述其行为。
    *   **公开符号**: 需要被外部包引用的符号（变量、常量、函数、类型、方法），首字母必须大写。内部符号首字母小写。
*   **注释** (完整代码注释规范参见 [Go 代码注释规范](mdc:go-comments.mdc)):
    *   **公开 API**: 所有公开的函数、类型、常量、变量都应有文档注释，解释其用途和目的。注释应是完整的句子。
    *   **复杂逻辑**: 对非显而易见的逻辑、算法或决策添加注释说明"为什么"这样做。
    *   **避免冗余**: 不要注释显而易见的代码。
