---
description: 
globs: 
alwaysApply: true
---
# Go 测试实践指南 (v1.0)

本规则旨在指导 Go 项目的测试编写，确保代码的质量、可靠性和可维护性。

## 测试

*   **单元测试**: 为所有可导出的函数、方法以及关键的内部逻辑编写单元测试。
    *   测试文件命名为 `*_test.go`，与被测试的代码文件放在同一个包下 (项目结构中的测试组织参见 [Go 包设计与项目结构](mdc:go-packages.mdc#test))。
    *   测试函数命名为 `TestXxx` (Xxx 不以小写字母开头)，并接受 `*testing.T` 参数。(可配合 [`-race` 标志](mdc:go-security.mdc#3-并发安全-concurrency-safety) 进行数据竞争检测)。
    *   **AI 指导**: 创建新函数或修改现有函数时，提醒用户编写或更新相应的单元测试。
*   **覆盖主要场景**: 测试应覆盖正常情况、边界情况和错误情况。
    *   使用 `t.Run` 创建子测试，以便更好地组织和报告多个测试用例。
*   **表驱动测试 (Table-Driven Tests)**: 对于需要测试多种输入和输出组合的函数，**强烈推荐**使用表驱动测试。这使得测试用例易于阅读、添加和维护。
    *   '''go
        func TestMyFunction(t *testing.T) {
            cases := []struct {
                name     string
                input    string
                want     string
                wantErr  bool
            }{
                {"empty input", "", "", false},
                // ... more cases
            }
            for _, tc := range cases {
                t.Run(tc.name, func(t *testing.T) {
                    got, err := MyFunction(tc.input)
                    if (err != nil) != tc.wantErr {
                        t.Errorf("MyFunction() error = %v, wantErr %v", err, tc.wantErr)
                        return
                    }
                    if got != tc.want {
                        t.Errorf("MyFunction() = %v, want %v", got, tc.want)
                    }
                })
            }
        }
        '''
*   **测试覆盖率**: 关注测试覆盖率 (`go test -cover`) 作为代码质量的一个指标，但更重要的是测试用例的质量和有效性。高覆盖率并不总等同于高质量的测试。
*   **避免外部依赖**: 单元测试应尽可能独立，避免依赖外部服务（如数据库、网络）。使用接口和测试替身 (test doubles) 如 mocks, stubs, fakes 来隔离被测单元。
*   **Benchmark 测试**: 对于[性能敏感的代码](mdc:go-performance.mdc)，编写 Benchmark 测试 (`BenchmarkXxx` 函数，接受 `*testing.B` 参数) 来评估和追踪性能。
*   **示例测试 (Example Tests)**: 使用示例测试 (`ExampleXxx` 函数) 来提供代码使用示例，并验证示例代码的正确性。这些示例会出现在 [GoDoc](mdc:go-comments.mdc#2-文档注释-godoc) 中。
