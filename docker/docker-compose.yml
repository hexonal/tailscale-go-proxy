services:
  # 新增：Tailscale 数据平面/  # 代理池管理器 - 修正版本
  headscale:
    image: headscale/headscale:0.25-debug
    container_name: headscale
    command: serve
    restart: unless-stopped
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    ports:
      #- "8081:8080"   # HTTP API (需要通过反向代理提供 HTTPS)
      - "50443:50443" # gRPC
      - "9090:9090"   # Metrics
    volumes:
      - ./headscale-data:/var/lib/headscale
      - ./config/config.yaml:/etc/headscale/config.yaml:ro
      - ./config/derp.yaml:/etc/headscale/derp.yaml:ro
    devices:
      - /dev/net/tun  # TUN设备访问
    networks:
      - frontend
    depends_on:
      - derper
      - pg
    environment:
      - HEADSCALE_DATABASE_TYPE=postgres
      - HEADSCALE_DATABASE_HOST=pg
      - HEADSCALE_DATABASE_PORT=5432
      - HEADSCALE_DATABASE_USER=tailscale
      - HEADSCALE_DATABASE_PASS=tailscale
      - HEADSCALE_DATABASE_NAME=tailscale

  # DERP 服务器 - 修复端口映射
  derper:
    image: ghcr.io/yangchuansheng/derper:latest
    container_name: derper
    restart: unless-stopped
    ports:
      #- "127.0.0.1:8080:8080"  # 修复：添加端口映射给 Nginx 代理
      - "3478:3478/udp"        # STUN 端口
    environment:
      - DERP_DOMAIN=derp.ipv4.name
      - DERP_CERTMODE=manual
      - DERP_ADDR=:8080
      - DERP_HTTP_PORT=8080
      - DERP_STUN_PORT=3478
      - DERP_VERIFY_CLIENTS=false
      - DERP_HOSTNAME=derp.ipv4.name
    networks:
      - frontend

  headplane:
    image: ghcr.io/tale/headplane
    container_name: headplane
    restart: unless-stopped
    ports:
      - "3000:3000"   # Web UI
    environment:
      - HEADSCALE_URL=http://headscale:8080
      - COOKIE_SECRET=
    volumes:
      - ./headscale-data:/var/lib/headscale:ro
      # 修复：移除重复的挂载
      - ./config/headplane.yaml:/etc/headplane/config.yaml:ro
      - ./config/config.yaml:/etc/headscale/config.yaml:ro
      - ./config/derp.yaml:/etc/headscale/derp.yaml:ro
      # Docker socket 用于集成
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # 用户数据存储
      - ./headplane-data:/var/lib/headplane
    networks:
      - frontend

  tailscale-go-proxy:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: tailscale-go-proxy
    ports:
      - "8081:8081"
      - "1080:1080"
      - "9091:9091"
    volumes:
      - ./config/tailscale-go-proxy-config.yaml:/app/config.yaml
      - ./tailscale-data:/var/lib/tailscale
      - ./tailscale-sock:/var/run/tailscale
      - /dev/net/tun:/dev/net/tun
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - headscale
      - derper
      - pg
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    devices:
      - /dev/net/tun
    networks:
      - frontend

  pg:
    image: postgres:15
    container_name: pg
    restart: unless-stopped
    environment:
      - POSTGRES_DB=tailscale
      - POSTGRES_USER=tailscale
      - POSTGRES_PASSWORD=tailscale
    ports:
      - "5432:5432"
    volumes:
      - ./pg-data:/var/lib/postgresql/data
    networks:
      - frontend

networks:
  frontend:
    name: docker-compose_frontend
    driver: bridge
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: "2001:db8::/64"
